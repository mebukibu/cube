# Rubik Cube Model

import numpy as np
import random
import copy

class Cube:
  def __init__(self, state):
    self.correct = [
        [[0, 1, 2, 3], [0, 0, 0, 0], [4, 5,  6,  7]],
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0,  0,  0]],
        [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]],
        [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0,  0,  0]]
      ]
    if state == None:
      self.state = copy.deepcopy(self.correct)
    else:
      self.state = state
    self.moves = [
          [  [3, 0, 1, 2,   0, 0, 0, 0,   4, 5, 6, 7], [0, 0, 0, 0,  0, 0, 0, 0,   0, 0, 0, 0], [3, 0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  ],
          [  [1, 2, 3, 0,   0, 0, 0, 0,   4, 5, 6, 7], [0, 0, 0, 0,  0, 0, 0, 0,   0, 0, 0, 0], [1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 11], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  ],
          [  [0, 1, 2, 3,   0, 0, 0, 0,   5, 6, 7, 4], [0, 0, 0, 0,  0, 0, 0, 0,   0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 8], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  ],
          [  [0, 1, 2, 3,   0, 0, 0, 0,   7, 4, 5, 6], [0, 0, 0, 0,  0, 0, 0, 0,   0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 11, 8, 9, 10], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  ],
          [  [0, 1, 3, 7,   0, 0, 0, 0,   4, 5, 2, 6], [0, 0, 2, 1,  0, 0, 0, 0,   0, 0, 1, 2], [0, 1, 7, 3, 4, 5, 2, 10, 8, 9, 6, 11], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0],  ],
          [  [0, 1, 6, 2,   0, 0, 0, 0,   4, 5, 7, 3], [0, 0, 2, 1,  0, 0, 0, 0,   0, 0, 1, 2], [0, 1, 6, 3, 4, 5, 10, 2, 8, 9, 7, 11], [0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0],  ],
          [  [1, 5, 2, 3,   0, 0, 0, 0,   0, 4, 6, 7], [2, 1, 0, 0,  0, 0, 0, 0,   1, 2, 0, 0], [5, 1, 2, 3, 0, 8, 6, 7, 4, 9, 10, 11], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0],  ],
          [  [4, 0, 2, 3,   0, 0, 0, 0,   5, 1, 6, 7], [2, 1, 0, 0,  0, 0, 0, 0,   1, 2, 0, 0], [4, 1, 2, 3, 8, 0, 6, 7, 5, 9, 10, 11], [1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0],  ],
          [  [0, 2, 6, 3,   0, 0, 0, 0,   4, 1, 5, 7], [0, 2, 1, 0,  0, 0, 0, 0,   0, 1, 2, 0], [0, 6, 2, 3, 4, 1, 9, 7, 8, 5, 10, 11], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  ],
          [  [0, 5, 1, 3,   0, 0, 0, 0,   4, 6, 2, 7], [0, 2, 1, 0,  0, 0, 0, 0,   0, 1, 2, 0], [0, 5, 2, 3, 4, 9, 1, 7, 8, 6, 10, 11], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  ],
          [  [4, 1, 2, 0,   0, 0, 0, 0,   7, 5, 6, 3], [1, 0, 0, 2,  0, 0, 0, 0,   2, 0, 0, 1], [0, 1, 2, 4, 11, 5, 6, 3, 8, 9, 10, 7], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  ],
          [  [3, 1, 2, 7,   0, 0, 0, 0,   0, 5, 6, 4], [1, 0, 0, 2,  0, 0, 0, 0,   2, 0, 0, 1], [0, 1, 2, 7, 3, 5, 6, 11, 8, 9, 10, 4], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  ],
      ]
  
  def move(self, step):
    now_cp = self.state[0][0] + self.state[0][2]
    now_cd = self.state[1][0] + self.state[1][2]
    move_cp = self.moves[step][0][0:4] + self.moves[step][0][8:12]
    move_cd = self.moves[step][1][0:4] + self.moves[step][1][8:12]

    next_cp = [now_cp[move_cp[i]] for i in range(8)]
    next_cd = [(now_cd[move_cp[i]] + move_cd[i]) % 3  for i in range(8)]

    self.state[0][0] = next_cp[0:4]
    self.state[0][2] = next_cp[4:8]
    self.state[1][0] = next_cd[0:4]
    self.state[1][2] = next_cd[4:8]


    now_ep = self.state[2][0] + self.state[2][1]  + self.state[2][2]
    now_ed = self.state[3][0] + self.state[3][1]  + self.state[3][2]

    next_ep = [now_ep[self.moves[step][2][i]] for i in range(12)]
    next_ed = [(now_ed[self.moves[step][2][i]] + self.moves[step][3][i]) % 2 for i in range(12)]

    self.state[2] = [next_ep[i:i+4] for i in range(0, 9, 4)]
    self.state[3] = [next_ed[i:i+4] for i in range(0, 9, 4)]
  
  def check(self):
    return self.correct == self.state
  
  def reset(self, n):
    self.state = copy.deepcopy(self.correct)
    for i in range(n):
      step = random.randint(0, 11)
      self.move(step)
      print('reset step = ' + str(step + 1))


if __name__ == '__main__':
  cube = Cube(None)
  print(cube.check())
  cube.move(0)
  cube.move(10)
  cube.move(10)
  cube.move(8)
  cube.move(2)
  
  print(np.array(cube.state))
  print(cube.check())

  cube.reset(5)

  """
  first_state = np.array(\
    [[[3, 0, 2,  7], [0, 0, 0, 0], [5,  1, 6, 4]],\
     [[0, 0, 2,  1], [0, 0, 0, 0], [0,  1, 2, 0]],\
     [[3, 0, 6, 2], [4, 1, 10, 7], [9, 5, 11, 8]],\
     [[0, 0, 0,  0], [0, 0, 0, 0], [0,  0, 0, 0]]])

  first_state = np.array(
    [[[2, 0, 1,  7], [0, 0, 0, 0], [5,  6, 4, 3]],
     [[1, 0, 0,  2], [0, 0, 0, 0], [0,  0, 1, 2]],
     [[3, 0, 1, 7], [2, 5, 6, 11], [9, 10, 4, 8]],
     [[0, 0, 0,  0], [0, 0, 0, 0], [0,  0, 0, 0]]])
  """